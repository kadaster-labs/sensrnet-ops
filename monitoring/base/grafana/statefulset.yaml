apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  labels:
    k8s-app: grafana
spec:
  serviceName: grafana
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates: []    
  selector:
    matchLabels:
      k8s-app: grafana    
  template:
    metadata:
      labels: 
        k8s-app: grafana
    spec:
      serviceAccountName: grafana
      # Configure an init container that will `chmod 777` Grafana's data directory 
      # and volume before the main Grafana container starts up. 
      initContainers:
          - name: "init-chmod-data"
            image: debian:9
            imagePullPolicy: "IfNotPresent"
            command: ["chmod", "777", "/var/lib/grafana"]
            volumeMounts:
            - name: data
              mountPath: "/var/lib/grafana"      
      containers:
        - name: grafana
          image: grafana
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: grafana-env
          volumeMounts:
            - name: dashboards
              mountPath: "/var/lib/grafana/dashboards"
            - name: datasources
              mountPath: "/etc/grafana/provisioning/datasources/"
            - name: dashboardproviders
              mountPath: "/etc/grafana/provisioning/dashboards/"
            - name: data
              mountPath: "/var/lib/grafana"
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          # Define a liveness and readiness probe that will hit `/api/health` using port `3000`. 
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
            periodSeconds: 10
      # Define `configMap` volumes for the above ConfigMap files, and 
      # for Grafana's Storage data volume, which will be mounted to `/var/lib/grafana`.
      volumes:
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboardproviders
          configMap:
            name: grafana-dashboardproviders
        - name: dashboards
          configMap:
            name: grafana-dashboards